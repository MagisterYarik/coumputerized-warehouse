package telran.analizer.dataContainerAnalazerOpen;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.util.HashMap;
import java.util.Optional;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.cloud.stream.binder.test.InputDestination;
import org.springframework.cloud.stream.binder.test.OutputDestination;
import org.springframework.cloud.stream.binder.test.TestChannelBinderConfiguration;
import org.springframework.context.annotation.Import;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.GenericMessage;

import com.fasterxml.jackson.core.exc.StreamReadException;
import com.fasterxml.jackson.databind.DatabindException;
import com.fasterxml.jackson.databind.ObjectMapper;

import telran.coumputerizedWarehouse.dto.ContainerDemand;
import telran.coumputerizedWarehouse.dto.ContainerSensor;
import telran.coumputerizedWarehouse.dto.ContainerSensorChanged;

@SpringBootTest(properties = {})
@Import(TestChannelBinderConfiguration.class)
public class ContainerAnalizerOpenTest {

	private static final long CONTAINER_ID_NO_PREV = 123;
	private static final long CONTAINER_ID_PREV_MORE = 124;
	private static final long CONTAINER_ID_PREV_LESS = 125;
	private static final double VALUE_MORE = 0.8;
	private static final double VALUE_LESS = 0.3;
	private static final double NO_VALUE = -1;

	@Autowired
	InputDestination producer;
	@Autowired
	OutputDestination consumer;

	ContainerSensorChanged sensorNoPrevNewMore = new ContainerSensorChanged(CONTAINER_ID_NO_PREV, VALUE_MORE, NO_VALUE);
	ContainerSensorChanged sensorNoPrevNewLess = new ContainerSensorChanged(CONTAINER_ID_NO_PREV, VALUE_LESS, NO_VALUE);
	ContainerSensorChanged sensorPrevMoreNewMore = new ContainerSensorChanged(CONTAINER_ID_PREV_MORE, VALUE_MORE,
			VALUE_MORE);
	ContainerSensorChanged sensorPrevMoreNewLess = new ContainerSensorChanged(CONTAINER_ID_PREV_MORE, VALUE_LESS,
			VALUE_MORE);
	ContainerSensorChanged sensorPrevLessNewMore = new ContainerSensorChanged(CONTAINER_ID_PREV_LESS, VALUE_MORE,
			VALUE_LESS);
	ContainerSensorChanged sensorPrevLessNewLess = new ContainerSensorChanged(CONTAINER_ID_PREV_LESS, VALUE_LESS,
			VALUE_LESS);
	private String producerBindingName = "containerInfoProducer-out-0";
	private String consumerBindingName = "containerInfoConsumer-in-0";

	@Test
	void NoMessageTest() throws Exception {

		producer.send(new GenericMessage<ContainerSensorChanged>(sensorNoPrevNewMore), consumerBindingName);

		Message<byte[]> message = consumer.receive(100, producerBindingName);
		assertNull(message);
		producer.send(new GenericMessage<ContainerSensorChanged>(sensorPrevLessNewLess), consumerBindingName);

		Message<byte[]> message1 = consumer.receive(100, producerBindingName);
		assertNull(message1);
		producer.send(new GenericMessage<ContainerSensorChanged>(sensorPrevLessNewMore), consumerBindingName);

		Message<byte[]> message2 = consumer.receive(100, producerBindingName);
		assertNull(message2);

		producer.send(new GenericMessage<ContainerSensorChanged>(sensorPrevMoreNewMore), consumerBindingName);
		Message<byte[]> message3 = consumer.receive(100, producerBindingName);
		assertNull(message3);

	}

	@Test
	void MessageTest() throws Exception {
		producer.send(new GenericMessage<ContainerSensorChanged>(sensorNoPrevNewLess), consumerBindingName);

		Message<byte[]> message = consumer.receive(100, producerBindingName);
		assertNotNull(message);
		ObjectMapper mapper = new ObjectMapper();
		ContainerDemand messegeInfo=mapper.readValue(message.getPayload(), ContainerDemand.class);
		assertEquals(CONTAINER_ID_NO_PREV, messegeInfo.containerId());
		assertEquals(1-VALUE_LESS, messegeInfo.demandVolume());
		
		producer.send(new GenericMessage<ContainerSensorChanged>(sensorPrevMoreNewLess), consumerBindingName);

		Message<byte[]> message1 = consumer.receive(100, producerBindingName);
		assertNotNull(message1);
		messegeInfo=mapper.readValue(message1.getPayload(), ContainerDemand.class);
		assertEquals(CONTAINER_ID_PREV_MORE, messegeInfo.containerId());
		assertEquals(1-VALUE_LESS, messegeInfo.demandVolume());
	}

}
