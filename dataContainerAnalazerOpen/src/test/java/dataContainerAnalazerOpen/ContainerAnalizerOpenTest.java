package dataContainerAnalazerOpen;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.util.HashMap;
import java.util.Optional;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.cloud.stream.binder.test.InputDestination;
import org.springframework.cloud.stream.binder.test.OutputDestination;
import org.springframework.cloud.stream.binder.test.TestChannelBinderConfiguration;
import org.springframework.context.annotation.Import;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.GenericMessage;

import com.fasterxml.jackson.core.exc.StreamReadException;
import com.fasterxml.jackson.databind.DatabindException;
import com.fasterxml.jackson.databind.ObjectMapper;

import telran.analizer.dataContainerAnalazerOpen.dto.ContainerDemand;
import telran.analizer.dataContainerAnalazerOpen.dto.ContainerSensor;
import telran.analizer.dataContainerAnalazerOpen.entitise.ContainerPriveuseState;
import telran.analizer.dataContainerAnalazerOpen.repo.ContainerSensorRepo;
@SpringBootTest(properties = {})
@Import(TestChannelBinderConfiguration.class)
public class ContainerAnalizerOpenTest {

	private static final long CONTAINER_ID_NO_PREV = 123;
	private static final long CONTAINER_ID_PREV_MORE = 124;
	private static final long CONTAINER_ID_PREV_LESS = 125;
	private static final double VALUE_MORE = 0.8;
	private static final double VALUE_LESS = 0.3;
	
	@Autowired
	InputDestination producer;
	@Autowired
	OutputDestination consumer;
	@MockBean
	ContainerSensorRepo privState ;
	
	static HashMap<Long, ContainerPriveuseState> redisMap = new HashMap<>();
	ContainerPriveuseState noPrev= new ContainerPriveuseState();	
	static ContainerPriveuseState prevMore= new ContainerPriveuseState(CONTAINER_ID_PREV_MORE, VALUE_MORE);	
	static ContainerPriveuseState prevLess= new ContainerPriveuseState(CONTAINER_ID_PREV_MORE, VALUE_LESS);	
	ContainerSensor sensorNoPrev= new ContainerSensor(CONTAINER_ID_NO_PREV, VALUE_MORE);
	ContainerSensor sensorPrevMore= new ContainerSensor(CONTAINER_ID_PREV_MORE, VALUE_MORE);
	ContainerSensor sensorPrevLess= new ContainerSensor(CONTAINER_ID_PREV_LESS, VALUE_LESS);
	private String producerBindingName = "containerInfoProducer-out-0";
	private String consumerBindingName = "containerInfoConsumer-in-0";
	
	@BeforeAll
	static void setUpAll() {
		
		redisMap.put(CONTAINER_ID_PREV_LESS,prevMore);
		redisMap.put(CONTAINER_ID_PREV_LESS,prevLess);
	}
	
	@Test
	void NoPrevValueTest() throws Exception {
		when(privState.findById(CONTAINER_ID_NO_PREV))
		.thenReturn(Optional.ofNullable(null));
		when(privState.save(new ContainerPriveuseState(CONTAINER_ID_NO_PREV , VALUE_MORE)))
		.thenAnswer(new Answer<ContainerPriveuseState>() {

			@Override
			public ContainerPriveuseState answer(InvocationOnMock invocation) throws Throwable {
				redisMap.put(CONTAINER_ID_NO_PREV, invocation.getArgument(0));
				return invocation.getArgument(0);
			}
		});
		producer.send(new GenericMessage<ContainerSensor>(sensorNoPrev), consumerBindingName );
		
		Message<byte[]> message = consumer.receive(100, producerBindingName );
		assertNull(message);
		assertEquals(VALUE_MORE, redisMap.get(CONTAINER_ID_NO_PREV).getCurrentVolume());
		
		
	
	}
	@Test
	void PrevValueMore() throws Exception  {
		when(privState.findById(CONTAINER_ID_PREV_MORE))
		.thenReturn(Optional.of(prevMore));
		when(privState.save(new ContainerPriveuseState(CONTAINER_ID_PREV_MORE , VALUE_MORE)))
		.thenAnswer(new Answer<ContainerPriveuseState>() {

			@Override
			public ContainerPriveuseState answer(InvocationOnMock invocation) throws Throwable {
				redisMap.put(CONTAINER_ID_PREV_MORE, invocation.getArgument(0));
				return invocation.getArgument(0);
			}
		});
		producer.send(new GenericMessage<ContainerSensor>(sensorPrevMore), consumerBindingName );
		
		Message<byte[]> message = consumer.receive(100, producerBindingName );
		assertNull(message);
		assertEquals(VALUE_MORE, redisMap.get(CONTAINER_ID_PREV_MORE).getCurrentVolume());

		
	}
	@Test
	void PrevValueLess() throws Exception {
		when(privState.findById(CONTAINER_ID_PREV_LESS))
		.thenReturn(Optional.of(prevLess));
		when(privState.save(new ContainerPriveuseState(CONTAINER_ID_PREV_LESS , VALUE_LESS)))
		.thenAnswer(new Answer<ContainerPriveuseState>() {

			@Override
			public ContainerPriveuseState answer(InvocationOnMock invocation) throws Throwable {
				redisMap.put(CONTAINER_ID_PREV_LESS, invocation.getArgument(0));
				return invocation.getArgument(0);
			}
		});
		producer.send(new GenericMessage<ContainerSensor>(sensorNoPrev), consumerBindingName );
		
		Message<byte[]> message = consumer.receive(100, producerBindingName );
		assertNotNull(message);
		assertEquals(VALUE_MORE, redisMap.get(CONTAINER_ID_PREV_LESS).getCurrentVolume());
		ObjectMapper mapper = new ObjectMapper();
		ContainerDemand messegeInfo= mapper.readValue(message.getPayload(), ContainerDemand.class);
		assertEquals(messegeInfo.containerId(), CONTAINER_ID_PREV_LESS);
		assertEquals(messegeInfo.demandVolume(), 1-VALUE_LESS);
	}

}
